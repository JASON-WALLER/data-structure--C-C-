#include <iostream>  
using namespace std;  
   
/*循环队列的类型定义*/  
const int Queue_Size=100;  
   
typedef struct circlQueue  
{  
       char *elem;  
       int rear;  
       int front;  
       int queueSize;  
}circlQueue;  
   
   
   
/*初始化*/  
void initQueue_C(circlQueue &Q)  
{  
       Q.elem=new char[Queue_Size];  
       Q.front=Q.rear=0;//首尾指针相等说明队列为空。  
       Q.queueSize=Queue_Size;  
}  
   
   

void destroyQueue_C(circlQueue &Q)  //销毁队列
{  
       delete []Q.elem;  
       Q.front=Q.rear=0;   //使首尾相等，销毁队列 
       Q.queueSize=0;  
}  
   
   
/*入队列*/  
void enterQueue_C(circlQueue &Q,char x)  
{  
       if(((Q.rear+1)%Q.queueSize)==Q.front)//判断队满的情况  
              cout<<"Queue OverFlow!";  
       Q.elem[Q.rear]=x;  
       Q.rear=(Q.rear+1)%Queue_Size;//尾指针应以此种方式加1，才会实现循环队列。  
}  
   
/*出队列*/  
char outputQueue_C(circlQueue &Q)  
{  
       char e;  
       if(Q.rear==Q.front)  
              cout<<"Queue Empty";  
       e=Q.elem[Q.front];  
       Q.front=(Q.front+1)%Q.queueSize;;//头指针应以此种方式加1，才会实现循环队列。  
       return e;  
}  
   
   int main()  
{  
       circlQueue Q;  
       initQueue_C(Q);  				//初始化队列 
       enterQueue_C(Q,'a');  			//字符a入队 
       enterQueue_C(Q,'b');  	
       enterQueue_C(Q,'c');  			 
       enterQueue_C(Q,'d');  			
       cout<<outputQueue_C(Q)<<endl;  	//按顺序出队，一共出队3个 
       cout<<outputQueue_C(Q)<<endl;  	//同上 
       cout<<outputQueue_C(Q)<<endl;  
       destroyQueue_C(Q);  				//销毁队列 
}  


